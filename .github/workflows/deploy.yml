name: Deploy Tunnelmole Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tunnelmole-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for change detection
    
    - name: Check for code changes
      id: code-changes
      run: |
        # Check if there are changes in source code, package files, or Docker files
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(ts|js|json|toml|dockerfile|Dockerfile)$|package\.json|package-lock\.json|tsconfig\.json|^src/|^srv/|^app\.ts|^config\.ts|^constants\.ts|^message-handlers\.ts|^websocket\.ts' > /dev/null; then
          echo "code_changed=true" >> $GITHUB_OUTPUT
          echo "Code changes detected - Docker build required"
        else
          echo "code_changed=false" >> $GITHUB_OUTPUT
          echo "No code changes detected - skipping Docker build"
        fi
    
    - name: Check for infrastructure changes
      id: infra-changes
      run: |
        # Check if there are changes in infrastructure files
        if git diff --name-only HEAD~1 HEAD | grep -E '^infrastructure/|^\.github/workflows/' > /dev/null; then
          echo "infra_changed=true" >> $GITHUB_OUTPUT
          echo "Infrastructure changes detected"
        else
          echo "infra_changed=false" >> $GITHUB_OUTPUT
          echo "No infrastructure changes detected"
        fi
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate CloudFormation template
      run: |
        echo "Validating CloudFormation template..."
        aws cloudformation validate-template --template-body file://infrastructure/cloudformation-template.yaml
        echo "‚úÖ CloudFormation template validation passed"
    
    - name: Login to Amazon ECR
      id: login-ecr
      if: steps.code-changes.outputs.code_changed == 'true'
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Create ECR repository if it doesn't exist
      if: steps.code-changes.outputs.code_changed == 'true'
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
    
    - name: Set ECR repository URI
      id: set-ecr-uri
      run: |
        # Get existing ECR URI if no code changes, otherwise use login output
        if [ "${{ steps.code-changes.outputs.code_changed }}" == "true" ]; then
          ECR_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        else
          # Get existing ECR URI from AWS
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
        fi
        echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push image to Amazon ECR
      if: steps.code-changes.outputs.code_changed == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image due to code changes..."
        
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Docker image built and pushed successfully"
    
    - name: Skip Docker build
      if: steps.code-changes.outputs.code_changed == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping Docker build - no code changes detected"
        echo "Using existing Docker image from ECR"
    
    - name: Deploy CloudFormation stack
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        # Set default values for optional parameters
        DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
        CERTIFICATE_ARN="${{ secrets.CERTIFICATE_ARN }}"
        KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
        MONITORING_PASSWORD="${{ secrets.MONITORING_PASSWORD }}"
        
        # Use defaults if secrets are not set
        if [ -z "$MONITORING_PASSWORD" ]; then
          MONITORING_PASSWORD="changeme123!"
        fi
        
        # Use the ECR URI from the previous step
        ECR_URI="${{ steps.set-ecr-uri.outputs.ecr_uri }}"
        
        echo "Deploying CloudFormation stack..."
        if [ "${{ steps.code-changes.outputs.code_changed }}" == "true" ]; then
          echo "üîÑ Deploying with new Docker image"
        else
          echo "üîÑ Deploying with existing Docker image"
        fi
        
        aws cloudformation deploy \
          --template-file infrastructure/cloudformation-template.yaml \
          --stack-name $STACK_NAME \
          --parameter-overrides \
            ECRRepositoryURI="$ECR_URI" \
            DomainName="$DOMAIN_NAME" \
            CertificateArn="$CERTIFICATE_ARN" \
            KeyPairName="$KEY_PAIR_NAME" \
            MonitoringPassword="$MONITORING_PASSWORD" \
            CreateKeyPair=true \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ CloudFormation deployment completed"
    
    - name: Get stack outputs
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs' \
          --output table
    
    - name: Update EC2 instance
      if: steps.code-changes.outputs.code_changed == 'true'
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        echo "Updating EC2 instance with new Docker image..."
        
        # Get the EC2 instance ID from CloudFormation outputs
        INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`EC2InstanceId`].OutputValue' \
          --output text)
        
        # Send command to update the Docker container
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cd /opt/tunnelmole && aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.set-ecr-uri.outputs.ecr_uri }} && docker-compose pull && docker-compose up -d"]' \
          --region ${{ env.AWS_REGION }} || echo "SSM command failed, container will update via cron job"
        
        echo "‚úÖ EC2 instance update initiated"
    
    - name: Skip EC2 update
      if: steps.code-changes.outputs.code_changed == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping EC2 update - no code changes detected"
    
    - name: Display deployment summary
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        echo "=== Deployment Summary ==="
        echo "Stack Name: $STACK_NAME"
        echo "ECR Repository: ${{ steps.set-ecr-uri.outputs.ecr_uri }}"
        echo "Code Changes: ${{ steps.code-changes.outputs.code_changed }}"
        echo "Infrastructure Changes: ${{ steps.infra-changes.outputs.infra_changed }}"
        echo ""
        if [ "${{ steps.code-changes.outputs.code_changed }}" == "true" ]; then
          echo "‚úÖ New Docker image built and deployed"
        else
          echo "‚è≠Ô∏è Existing Docker image reused"
        fi
        echo ""
        echo "=== Required Secrets for Custom Domain (Optional) ==="
        echo "DOMAIN_NAME: Your custom domain"
        echo "CERTIFICATE_ARN: SSL certificate ARN from ACM"
        echo ""
        echo "=== Next Steps ==="
        echo "1. Wait for deployment to complete"
        echo "2. Check CloudFormation outputs for endpoints"
        echo "3. Configure your tunnelmole client with the WebSocket endpoint"
        echo "4. (Optional) Set up custom domain with SSL certificate"