name: Deploy Tunnelmole Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tunnelmole-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
    
    - name: Set ECR repository URI
      id: set-ecr-uri
      run: |
        ECR_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy CloudFormation stack
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        STACK_NAME: tunnelmole-service-stack
      run: |
        # Set default values for optional parameters
        DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
        CERTIFICATE_ARN="${{ secrets.CERTIFICATE_ARN }}"
        KEY_PAIR_NAME="${{ secrets.KEY_PAIR_NAME }}"
        MONITORING_PASSWORD="${{ secrets.MONITORING_PASSWORD }}"
        
        # Use defaults if secrets are not set
        if [ -z "$MONITORING_PASSWORD" ]; then
          MONITORING_PASSWORD="changeme123!"
        fi
        
        aws cloudformation deploy \
          --template-file infrastructure/cloudformation-template.yaml \
          --stack-name $STACK_NAME \
          --parameter-overrides \
            ECRRepositoryURI=$ECR_REGISTRY/$ECR_REPOSITORY \
            DomainName="$DOMAIN_NAME" \
            CertificateArn="$CERTIFICATE_ARN" \
            KeyPairName="$KEY_PAIR_NAME" \
            MonitoringPassword="$MONITORING_PASSWORD" \
            CreateKeyPair=true \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}
    
    - name: Get stack outputs
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs' \
          --output table
    
    - name: Update EC2 instance
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        # Get the EC2 instance ID from CloudFormation outputs
        INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --query 'Stacks[0].Outputs[?OutputKey==`EC2InstanceId`].OutputValue' \
          --output text)
        
        # Send command to update the Docker container
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["cd /opt/tunnelmole && aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} && docker-compose pull && docker-compose up -d"]' \
          --region ${{ env.AWS_REGION }} || echo "SSM command failed, container will update via cron job"
    
    - name: Display deployment summary
      env:
        STACK_NAME: tunnelmole-service-stack
      run: |
        echo "=== Deployment Summary ==="
        echo "Stack Name: $STACK_NAME"
        echo "ECR Repository: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}"
        echo ""
        echo "=== Required Secrets for Custom Domain (Optional) ==="
        echo "DOMAIN_NAME: Your custom domain"
        echo "CERTIFICATE_ARN: SSL certificate ARN from ACM"
        echo ""
        echo "=== Next Steps ==="
        echo "1. Wait for deployment to complete"
        echo "2. Check CloudFormation outputs for endpoints"
        echo "3. Configure your tunnelmole client with the WebSocket endpoint"
        echo "4. (Optional) Set up custom domain with SSL certificate"